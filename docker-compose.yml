---

version: '3.8'

services:

  nginx:
    build:
      context: ./
      dockerfile: ./docker/nginx/Dockerfile
    container_name: nginx
    depends_on:
      - appnya1
      - appnya2
      - appnya3
      - appnya4
      - appnya5
      - appnya6
      - appnya7
      - appnya8
      - appnya9
      - appnya10
    ports:
      - "80:80"
    volumes:
      - ${APP_PATH}:${DOCUMENT_ROOT}
      - ./docker/nginx/config/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/config/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - appnet

  appnya1:
    build:
      context: ./
      dockerfile: ./docker/php/app1/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya1
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped
  
  appnya2:
    build:
      context: ./
      dockerfile: ./docker/php/app2/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya2
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  appnya3:
    build:
      context: ./
      dockerfile: ./docker/php/app3/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya3
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped
  
  appnya4:
    build:
      context: ./
      dockerfile: ./docker/php/app4/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya4
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  appnya5:
    build:
      context: ./
      dockerfile: ./docker/php/app5/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya5
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  appnya6:
    build:
      context: ./
      dockerfile: ./docker/php/app6/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya6
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped
  
  appnya7:
    build:
      context: ./
      dockerfile: ./docker/php/app7/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya7
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  appnya8:
    build:
      context: ./
      dockerfile: ./docker/php/app8/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya8
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  appnya9:
    build:
      context: ./
      dockerfile: ./docker/php/app9/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya9
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  appnya10:
    build:
      context: ./
      dockerfile: ./docker/php/app10/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: appnya10
    links:
      - postgres 
      - redis
    depends_on:
      - redis
    volumes:
      - ${APP_PATH}/storage:/var/www/html/storage
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - appnet
    restart: unless-stopped

  spv:
    build:
      context: ./
      dockerfile: ./docker/spv/Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    container_name: spv
    volumes:
      - ${APP_PATH}:${DOCUMENT_ROOT}
    links:
      - postgres
      - redis
    networks:
      - appnet

  pg-0:
    image: docker.io/bitnami/postgresql-repmgr:14
    ports:
      - 5432
    volumes:
      - pg_0_data:/bitnami/postgresql
    container_name: pg-0
    networks:
      - appnet
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=${DB_ADMIN_PASSWORD}
      - POSTGRESQL_USERNAME=${DB_USERNAME}
      - POSTGRESQL_PASSWORD=${DB_PASSWORD}
      - POSTGRESQL_DATABASE=${DB_DATABASE}
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=2 #jumlah yang ingin di replika
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-2,pg-1,pg-0
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
  pg-1:
    image: docker.io/bitnami/postgresql-repmgr:14
    ports:
      - 5432
    volumes:
      - pg_1_data:/bitnami/postgresql
    container_name: pg-1
    networks:
      - appnet
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=${DB_ADMIN_PASSWORD}
      - POSTGRESQL_USERNAME=${DB_USERNAME}
      - POSTGRESQL_PASSWORD=${DB_PASSWORD}
      - POSTGRESQL_DATABASE=${DB_DATABASE}
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=2
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
  pg-2:
    image: docker.io/bitnami/postgresql-repmgr:14
    ports:
      - 5432
    volumes:
      - pg_2_data:/bitnami/postgresql
    container_name: pg-2
    networks:
      - appnet
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=${DB_ADMIN_PASSWORD}
      - POSTGRESQL_USERNAME=${DB_USERNAME}
      - POSTGRESQL_PASSWORD=${DB_PASSWORD}
      - POSTGRESQL_DATABASE=${DB_DATABASE}
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=2 
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-2
      - REPMGR_NODE_NETWORK_NAME=pg-2
  postgres:
    image: docker.io/bitnami/pgpool:4
    ports:
      - 5432:5432
    container_name: postgres
    volumes:
      - ./docker/postgres/myconf.conf:/config/myconf.conf
    environment:
      - PGPOOL_USER_CONF_FILE=/config/myconf.conf
      - PGPOOL_BACKEND_NODES=0:pg-0:5432,1:pg-1:5432,2:pg-2:5432
      - PGPOOL_SR_CHECK_USER=${DB_USERNAME}
      - PGPOOL_SR_CHECK_PASSWORD=${DB_PASSWORD}
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=${DB_ADMIN_PASSWORD}
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=${DB_ADMIN_PASSWORD}
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    build:
      context: ./
      dockerfile: ./docker/redis/Dockerfile
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis:/data
    networks:
      - appnet
    restart: unless-stopped

networks:
  appnet:
    name: appnet
    driver: "bridge"

volumes:
  postgres:
    driver: local
  redis:
    driver: local
  pg_0_data:
    driver: local
  pg_1_data:
    driver: local
  pg_2_data:
    driver: local